// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Serverless environments optimization - connection settings managed in client code
}

enum Role {
  USER
  ADMIN
  // อาจมี roles อื่นๆ
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  password       String
  image          String?
  role           Role            @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  Prediction     Prediction[]
  predictionLogs PredictionLog[]
  userImages     UserImage[] // เพิ่มบรรทัดนี้
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Add Prediction model
model Prediction {
  id             String   @id @default(cuid())
  userId         String
  inputImageUrl  String
  outputImageUrl String?
  detections     Json
  timestamp      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Log entries for predictions
model PredictionLog {
  id         String            @id @default(cuid())
  userId     String
  timestamp  DateTime          @default(now())
  imageCount Int
  images     PredictionImage[]
  detections Json // Store all detections
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  title      String?
  description String?
}

model UserImage {
  id        String   @id @default(cuid())
  userId    String
  imageData Bytes // เก็บข้อมูลรูปภาพโดยตรง
  mimeType  String // เช่น "image/jpeg", "image/png"
  filename  String
  isProfile Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PredictionImage {
  id              String        @id @default(cuid())
  originalImage   Bytes?        // เปลี่ยนเป็น optional (ใส่ ?)
  annotatedImage  Bytes?
  mimeType        String
  filename        String
  predictionLogId String
  predictionLog   PredictionLog @relation(fields: [predictionLogId], references: [id], onDelete: Cascade)
}
